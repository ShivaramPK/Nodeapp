//Required modules
const ipfsAPI = require('ipfs-api');
const fs = require('fs');
const path = require('path');
let nodemailer = require("nodemailer");
const uuidv4 = require('uuid/v4');
var EventEmitter = require("events").EventEmitter;
const winlog = require("../log/winstonlog");

//Connceting to the ipfs network via infura gateway
const ipfs = ipfsAPI('104.42.155.78', '5001', { protocol: 'http' });

const solc = require('solc');
const { get } = require('http');
const Web3 = require('web3');
const { arrayIntersectSafe } = require('excel4node/distribution/lib/utils');
const { stringify } = require('querystring');
const { resolveObjectURL } = require('buffer');
//const web3 = new Web3("https://api.avax-test.network/ext/bc/C/rpc");
const web3 = new Web3("http://104.42.155.78:9650/ext/bc/2ALtzRYgRpRWnTgjdrMArkMvU6RTpcjs7VWmupqYaPrHDrHLSd/rpc");
const privKey = 'ccd1a9d8a8fa89fb020c027abc62088f9dca7734f945dc6a0577d06b6d502077';  //replcae
const address = '0x1F592d5CD2c0B0C5709f4e2a0cFa4849c7935d6a';

var MongoClient = require('mongodb').MongoClient;
//var url = "mongodb://localhost:27017/IntainMarkets";
var url = "mongodb://root:" + encodeURIComponent("oAq2hidBW5hHHudL") + "@104.42.155.78:27017/IntainMarkets";

var IPFS = {

    addfile: function (req, res) {
        if (!req.body.poolid) {
            res.status(400).send({ "message": "Missing Arguments!" })
        } else {
            winlog.info("new address::::::::")
            var s = new Date();
            winlog.info("date ::::::::"+s)
            winlog.info("NFT started at ::::: " + s.getHours() + " " + s.getMinutes() + " " + s.getSeconds());

            var IpfsEmitter = new EventEmitter();
            var poolEmitter = new EventEmitter();
            var finalloancontractarr = [];
            var loancontractlength = 0;
            var count = 0;
            var loanmap = {};
            MongoClient.connect(url, function (err, client) {
                const db = client.db("IntainMarkets");
                db.collection('contract').find({ poolid: req.body.poolid }).toArray(function (err, result) {
                    winlog.info("res:: " + result.length);
                    loancontractlength = result.length;
                    //  winlog.info(JSON.stringify(result))
                    if (result.length > 0) {
                        for (var i = 0; i < result.length; i++) {
                            // winlog.info(result[i])
                            winlog.info(result[i].loandocpath)
                            // winlog.info("loan contract number::::::" + result[i].contract_number);
                            // IpfsEmitter.emit('IPFSsaveloancontract', result[i].contract_number, result[i])
                            winlog.info(i + "::::::::::::: ")

                            IpfsEmitter.emit('extractattributes', result[i].loandocpath, result[i])

                        }
                    }
                });

            });


            IpfsEmitter.on('extractattributes', (loandocpath, loancontract) => {
                var finalmetadata = {}

                loancontract.extracted_attributes.forEach(values => {
                    var key = values[0];
                    //  winlog.info(key+":::::::::::::: "+loancontract[key])
                    finalmetadata[key] = loancontract[key]
                })
                winlog.info(finalmetadata)
                IpfsEmitter.emit('IPFSsaveloancontract', loandocpath, finalmetadata)

            })

            IpfsEmitter.on('IPFSsaveloancontract', (loandocpath, loancontract) => {
                winlog.info("After extractattribute")
              //  var testFile = fs.readFileSync("/home/pavithra/y/pool1/TWO24788.pdf");

                var final = path.resolve(__dirname + '/../uploads/' + loandocpath);            //var testFile = fs.readFileSync("/home/pavithra/y/pool1/TWO24788.pdf");
                var testFile = fs.readFileSync(final);

                //Creating buffer for ipfs function to add file to the system
                var testBuffer = new Buffer(testFile);
                // var testFile = fs.readFileSync("PATH_OF_FILE");
                //Creating buffer for ipfs function to add file to the system
                var testBuffer = new Buffer(testFile);
                ipfs.files.add(testBuffer, function (err, file) {
                    if (err) {
                        winlog.info(err);
                    }
                    winlog.info(file)
                    loancontract.URI = "http://104.42.155.78:8080/ipfs/" + file[0].hash;
                    // winlog.info("final loan contract:::::::: " + JSON.stringify(loancontract));
                    finalloancontractarr.push(loancontract)
                    count++;
                    if (count == loancontractlength) {
                        winlog.info("final loan contract metadata:::: " + JSON.stringify(finalloancontractarr));;
                        count = 0;
                        IpfsEmitter.emit('IPFSsavemetadata', finalloancontractarr)

                    }
                })
            })


            IpfsEmitter.on('IPFSsavemetadata', () => {
                winlog.info("\n inside save metadata emitter::::::::::");

                finalloancontractarr.forEach(loan => {
                    let testBuffer = new Buffer(JSON.stringify(loan));
                    ipfs.files.add(testBuffer, function (err, file) {
                        if (err) {
                            winlog.info(err);
                        }
                        count++;
                        // inputEmit.emit('NFTmint', file[0].hash,id);
                        loan.hash = file[0].hash;
                        winlog.info("file hash " + file[0].hash)

                        loanmap[loan.loanid] = file[0].hash
                        winlog.info("final hash::::" + loanmap)
                        if (count == finalloancontractarr.length) {
                            winlog.info("loan hash::::::" + JSON.stringify(loanmap))
                            deployNFT(loanmap);
                        }
                    })
                });
            })

            async function deployNFT(loanmap) {
                MongoClient.connect(url, function (err, client) {
                    const db = client.db("IntainMarkets");
                    db.collection('lms').find({ poolid: req.body.poolid }).toArray(function (err, result) {
                        winlog.info("res:: " + result.length);
                        if (result.length > 0) {
                            winlog.info("lms data:::" + JSON.stringify(result))
                            //getlmsdata(result,loanmap)
                            NFTandMint(result, loanmap)
                            winlog.info("done");
                        }
                    });

                    winlog.info("Done final : ")
                })
            }


            // async function getlmsdata(result, loanmap) {
            //     // result.splice(1, 1)

            //     var finallmsdata = []
            //     for (var i = 0; i < result.length; i++) {
            //         delete result[i]._id;
            //         const lmsdata = Object.keys(result[i]).map(key => result[i][key])
            //         finallmsdata.push(lmsdata)
            //     }
            //     winlog.info("final lms data::::::::::::: ")
            //     winlog.info(finallmsdata)

            //     NFTandMint(result, finallmsdata, loanmap)
            // }
            async function NFTandMint(result, loanmap) {
                const NFTowner = await getissueraccountaddress(result[0].issuerId);
                winlog.info("owner address fetch completed::::::")
                for (var i = 0; i < result.length; i++) {


                    winlog.info(loanmap[result[i].loanid] + "\n\n no of loans iterated ::::::" + i)
                    //  deploy NFT contract
                    const deployedaddress = await deploycontract(result[i].loanid, result[i].poolid, loanmap[result[i].loanid]);

                    //get issuer address

                    //safe mint in NFT
                    var mint = await safemint(deployedaddress, "/" + loanmap[result[i].loanid], NFTowner);
                    finalloancontractarr.contractaddress = deployedaddress;

                    winlog.info("after await::::: deploy and safemint\n")
                    winlog.info(mint)

                    // Transfer owership in NFT
                    const transferowner = await TransferOwnerShip(deployedaddress, NFTowner);


                    //save loan contract data in bc along with NFT deployed address
                    var save = await loancontractsave(deployedaddress, result[i])
                    winlog.info(save)
                }
                winlog.info("final::::")
                IpfsEmitter.emit('statuschange')
            }

            //NFT contract deploy
            async function deploycontract(loanid, poolid, hash) {

                return new Promise((resolve, reject) => {
                    const bytecode = "6080604052604051806020016040528060008152506002908162000024919062000405565b503480156200003257600080fd5b5060405162003fd038038062003fd0833981810160405281019062000058919062000650565b82828282600090816200006c919062000405565b5081600190816200007e919062000405565b50806002908162000090919062000405565b50505050620000b4620000a8620000bd60201b60201c565b620000c560201b60201c565b50505062000709565b600033905090565b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200020d57607f821691505b602082108103620002235762000222620001c5565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200028d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200024e565b6200029986836200024e565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620002e6620002e0620002da84620002b1565b620002bb565b620002b1565b9050919050565b6000819050919050565b6200030283620002c5565b6200031a6200031182620002ed565b8484546200025b565b825550505050565b600090565b6200033162000322565b6200033e818484620002f7565b505050565b5b8181101562000366576200035a60008262000327565b60018101905062000344565b5050565b601f821115620003b5576200037f8162000229565b6200038a846200023e565b810160208510156200039a578190505b620003b2620003a9856200023e565b83018262000343565b50505b505050565b600082821c905092915050565b6000620003da60001984600802620003ba565b1980831691505092915050565b6000620003f58383620003c7565b9150826002028217905092915050565b62000410826200018b565b67ffffffffffffffff8111156200042c576200042b62000196565b5b620004388254620001f4565b620004458282856200036a565b600060209050601f8311600181146200047d576000841562000468578287015190505b620004748582620003e7565b865550620004e4565b601f1984166200048d8662000229565b60005b82811015620004b75784890151825560018201915060208501945060208101905062000490565b86831015620004d75784890151620004d3601f891682620003c7565b8355505b6001600288020188555050505b505050505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b62000526826200050a565b810181811067ffffffffffffffff8211171562000548576200054762000196565b5b80604052505050565b60006200055d620004ec565b90506200056b82826200051b565b919050565b600067ffffffffffffffff8211156200058e576200058d62000196565b5b62000599826200050a565b9050602081019050919050565b60005b83811015620005c6578082015181840152602081019050620005a9565b60008484015250505050565b6000620005e9620005e38462000570565b62000551565b90508281526020810184848401111562000608576200060762000505565b5b62000615848285620005a6565b509392505050565b600082601f83011262000635576200063462000500565b5b815162000647848260208601620005d2565b91505092915050565b6000806000606084860312156200066c576200066b620004f6565b5b600084015167ffffffffffffffff8111156200068d576200068c620004fb565b5b6200069b868287016200061d565b935050602084015167ffffffffffffffff811115620006bf57620006be620004fb565b5b620006cd868287016200061d565b925050604084015167ffffffffffffffff811115620006f157620006f0620004fb565b5b620006ff868287016200061d565b9150509250925092565b6138b780620007196000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c806370a08231116100b8578063a22cb4651161007c578063a22cb46514610377578063b88d4fde14610393578063c87b56dd146103af578063cd279c7c146103df578063e985e9c5146103fb578063f2fde38b1461042b57610142565b806370a08231146102e3578063715018a614610313578063743976a01461031d5780638da5cb5b1461033b57806395d89b411461035957610142565b806323b872dd1161010a57806323b872dd146101ff5780632f745c591461021b57806342842e0e1461024b57806342966c68146102675780634f6ccce7146102835780636352211e146102b357610142565b806301ffc9a71461014757806306fdde0314610177578063081812fc14610195578063095ea7b3146101c557806318160ddd146101e1575b600080fd5b610161600480360381019061015c91906123d2565b610447565b60405161016e919061241a565b60405180910390f35b61017f610459565b60405161018c91906124c5565b60405180910390f35b6101af60048036038101906101aa919061251d565b6104eb565b6040516101bc919061258b565b60405180910390f35b6101df60048036038101906101da91906125d2565b610531565b005b6101e9610648565b6040516101f69190612621565b60405180910390f35b6102196004803603810190610214919061263c565b610655565b005b610235600480360381019061023091906125d2565b6106b5565b6040516102429190612621565b60405180910390f35b6102656004803603810190610260919061263c565b61075a565b005b610281600480360381019061027c919061251d565b61077a565b005b61029d6004803603810190610298919061251d565b6107d6565b6040516102aa9190612621565b60405180910390f35b6102cd60048036038101906102c8919061251d565b610847565b6040516102da919061258b565b60405180910390f35b6102fd60048036038101906102f8919061268f565b6108f8565b60405161030a9190612621565b60405180910390f35b61031b6109af565b005b6103256109c3565b60405161033291906124c5565b60405180910390f35b610343610a55565b604051610350919061258b565b60405180910390f35b610361610a7f565b60405161036e91906124c5565b60405180910390f35b610391600480360381019061038c91906126e8565b610b11565b005b6103ad60048036038101906103a8919061285d565b610b27565b005b6103c960048036038101906103c4919061251d565b610b89565b6040516103d691906124c5565b60405180910390f35b6103f960048036038101906103f49190612981565b610b9b565b005b610415600480360381019061041091906129f0565b610bbc565b604051610422919061241a565b60405180910390f35b6104456004803603810190610440919061268f565b610c50565b005b600061045282610cd3565b9050919050565b60606000805461046890612a5f565b80601f016020809104026020016040519081016040528092919081815260200182805461049490612a5f565b80156104e15780601f106104b6576101008083540402835291602001916104e1565b820191906000526020600020905b8154815290600101906020018083116104c457829003601f168201915b5050505050905090565b60006104f682610d4d565b6005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061053c82610847565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036105ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a390612b02565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166105cb610d98565b73ffffffffffffffffffffffffffffffffffffffff1614806105fa57506105f9816105f4610d98565b610bbc565b5b610639576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063090612b94565b60405180910390fd5b6106438383610da0565b505050565b6000600980549050905090565b610666610660610d98565b82610e59565b6106a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069c90612c26565b60405180910390fd5b6106b0838383610eee565b505050565b60006106c0836108f8565b8210610701576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f890612cb8565b60405180910390fd5b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b61077583838360405180602001604052806000815250610b27565b505050565b61078b610785610d98565b82610e59565b6107ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c190612c26565b60405180910390fd5b6107d381611154565b50565b60006107e0610648565b8210610821576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081890612d4a565b60405180910390fd5b6009828154811061083557610834612d6a565b5b90600052602060002001549050919050565b6000806003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036108ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e690612de5565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610968576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095f90612e77565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6109b7611160565b6109c160006111de565b565b6060600280546109d290612a5f565b80601f01602080910402602001604051908101604052809291908181526020018280546109fe90612a5f565b8015610a4b5780601f10610a2057610100808354040283529160200191610a4b565b820191906000526020600020905b815481529060010190602001808311610a2e57829003601f168201915b5050505050905090565b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610a8e90612a5f565b80601f0160208091040260200160405190810160405280929190818152602001828054610aba90612a5f565b8015610b075780601f10610adc57610100808354040283529160200191610b07565b820191906000526020600020905b815481529060010190602001808311610aea57829003601f168201915b5050505050905090565b610b23610b1c610d98565b83836112a4565b5050565b610b38610b32610d98565b83610e59565b610b77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6e90612c26565b60405180910390fd5b610b8384848484611410565b50505050565b6060610b948261146c565b9050919050565b610ba3611160565b610bad838361157e565b610bb7828261159c565b505050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610c58611160565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610cc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cbe90612f09565b60405180910390fd5b610cd0816111de565b50565b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610d465750610d4582611609565b5b9050919050565b610d56816116eb565b610d95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8c90612de5565b60405180910390fd5b50565b600033905090565b816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610e1383610847565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610e6583610847565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610ea75750610ea68185610bbc565b5b80610ee557508373ffffffffffffffffffffffffffffffffffffffff16610ecd846104eb565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610f0e82610847565b73ffffffffffffffffffffffffffffffffffffffff1614610f64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5b90612f9b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610fd3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fca9061302d565b60405180910390fd5b610fde838383611757565b610fe9600082610da0565b6001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611039919061307c565b925050819055506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461109091906130b0565b92505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461114f838383611767565b505050565b61115d8161176c565b50565b611168610d98565b73ffffffffffffffffffffffffffffffffffffffff16611186610a55565b73ffffffffffffffffffffffffffffffffffffffff16146111dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d390613130565b60405180910390fd5b565b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611312576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113099061319c565b60405180910390fd5b80600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611403919061241a565b60405180910390a3505050565b61141b848484610eee565b611427848484846117bf565b611466576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145d9061322e565b60405180910390fd5b50505050565b606061147782610d4d565b6000600b6000848152602001908152602001600020805461149790612a5f565b80601f01602080910402602001604051908101604052809291908181526020018280546114c390612a5f565b80156115105780601f106114e557610100808354040283529160200191611510565b820191906000526020600020905b8154815290600101906020018083116114f357829003601f168201915b5050505050905060006115216109c3565b90506000815103611536578192505050611579565b60008251111561156b57808260405160200161155392919061328a565b60405160208183030381529060405292505050611579565b61157484611946565b925050505b919050565b6115988282604051806020016040528060008152506119ae565b5050565b6115a5826116eb565b6115e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115db90613320565b60405180910390fd5b80600b6000848152602001908152602001600020908161160491906134ec565b505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806116d457507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806116e457506116e382611a09565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b611762838383611a73565b505050565b505050565b61177581611b85565b6000600b6000838152602001908152602001600020805461179590612a5f565b9050146117bc57600b600082815260200190815260200160002060006117bb9190612309565b5b50565b60006117e08473ffffffffffffffffffffffffffffffffffffffff16611ca2565b15611939578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611809610d98565b8786866040518563ffffffff1660e01b815260040161182b9493929190613613565b6020604051808303816000875af192505050801561186757506040513d601f19601f820116820180604052508101906118649190613674565b60015b6118e9573d8060008114611897576040519150601f19603f3d011682016040523d82523d6000602084013e61189c565b606091505b5060008151036118e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118d89061322e565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061193e565b600190505b949350505050565b606061195182610d4d565b600061195b6109c3565b9050600081511161197b57604051806020016040528060008152506119a6565b8061198584611cc5565b60405160200161199692919061328a565b6040516020818303038152906040525b915050919050565b6119b88383611e25565b6119c560008484846117bf565b611a04576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119fb9061322e565b60405180910390fd5b505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611a7e838383611ffe565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611ac057611abb81612003565b611aff565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611afe57611afd838261204c565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611b4157611b3c816121b9565b611b80565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611b7f57611b7e828261228a565b5b5b505050565b6000611b9082610847565b9050611b9e81600084611757565b611ba9600083610da0565b6001600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611bf9919061307c565b925050819055506003600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611c9e81600084611767565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b606060008203611d0c576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611e20565b600082905060005b60008214611d3e578080611d27906136a1565b915050600a82611d379190613718565b9150611d14565b60008167ffffffffffffffff811115611d5a57611d59612732565b5b6040519080825280601f01601f191660200182016040528015611d8c5781602001600182028036833780820191505090505b5090505b60008514611e1957600182611da5919061307c565b9150600a85611db49190613749565b6030611dc091906130b0565b60f81b818381518110611dd657611dd5612d6a565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611e129190613718565b9450611d90565b8093505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611e94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8b906137c6565b60405180910390fd5b611e9d816116eb565b15611edd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ed490613832565b60405180910390fd5b611ee960008383611757565b6001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611f3991906130b0565b92505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611ffa60008383611767565b5050565b505050565b600980549050600a600083815260200190815260200160002081905550600981908060018154018082558091505060019003906000526020600020016000909190919091505550565b60006001612059846108f8565b612063919061307c565b9050600060086000848152602001908152602001600020549050818114612148576000600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816008600083815260200190815260200160002081905550505b6008600084815260200190815260200160002060009055600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b600060016009805490506121cd919061307c565b90506000600a60008481526020019081526020016000205490506000600983815481106121fd576121fc612d6a565b5b90600052602060002001549050806009838154811061221f5761221e612d6a565b5b906000526020600020018190555081600a600083815260200190815260200160002081905550600a600085815260200190815260200160002060009055600980548061226e5761226d613852565b5b6001900381819060005260206000200160009055905550505050565b6000612295836108f8565b905081600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806008600084815260200190815260200160002081905550505050565b50805461231590612a5f565b6000825580601f106123275750612346565b601f0160209004906000526020600020908101906123459190612349565b5b50565b5b8082111561236257600081600090555060010161234a565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6123af8161237a565b81146123ba57600080fd5b50565b6000813590506123cc816123a6565b92915050565b6000602082840312156123e8576123e7612370565b5b60006123f6848285016123bd565b91505092915050565b60008115159050919050565b612414816123ff565b82525050565b600060208201905061242f600083018461240b565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561246f578082015181840152602081019050612454565b60008484015250505050565b6000601f19601f8301169050919050565b600061249782612435565b6124a18185612440565b93506124b1818560208601612451565b6124ba8161247b565b840191505092915050565b600060208201905081810360008301526124df818461248c565b905092915050565b6000819050919050565b6124fa816124e7565b811461250557600080fd5b50565b600081359050612517816124f1565b92915050565b60006020828403121561253357612532612370565b5b600061254184828501612508565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006125758261254a565b9050919050565b6125858161256a565b82525050565b60006020820190506125a0600083018461257c565b92915050565b6125af8161256a565b81146125ba57600080fd5b50565b6000813590506125cc816125a6565b92915050565b600080604083850312156125e9576125e8612370565b5b60006125f7858286016125bd565b925050602061260885828601612508565b9150509250929050565b61261b816124e7565b82525050565b60006020820190506126366000830184612612565b92915050565b60008060006060848603121561265557612654612370565b5b6000612663868287016125bd565b9350506020612674868287016125bd565b925050604061268586828701612508565b9150509250925092565b6000602082840312156126a5576126a4612370565b5b60006126b3848285016125bd565b91505092915050565b6126c5816123ff565b81146126d057600080fd5b50565b6000813590506126e2816126bc565b92915050565b600080604083850312156126ff576126fe612370565b5b600061270d858286016125bd565b925050602061271e858286016126d3565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61276a8261247b565b810181811067ffffffffffffffff8211171561278957612788612732565b5b80604052505050565b600061279c612366565b90506127a88282612761565b919050565b600067ffffffffffffffff8211156127c8576127c7612732565b5b6127d18261247b565b9050602081019050919050565b82818337600083830152505050565b60006128006127fb846127ad565b612792565b90508281526020810184848401111561281c5761281b61272d565b5b6128278482856127de565b509392505050565b600082601f83011261284457612843612728565b5b81356128548482602086016127ed565b91505092915050565b6000806000806080858703121561287757612876612370565b5b6000612885878288016125bd565b9450506020612896878288016125bd565b93505060406128a787828801612508565b925050606085013567ffffffffffffffff8111156128c8576128c7612375565b5b6128d48782880161282f565b91505092959194509250565b600067ffffffffffffffff8211156128fb576128fa612732565b5b6129048261247b565b9050602081019050919050565b600061292461291f846128e0565b612792565b9050828152602081018484840111156129405761293f61272d565b5b61294b8482856127de565b509392505050565b600082601f83011261296857612967612728565b5b8135612978848260208601612911565b91505092915050565b60008060006060848603121561299a57612999612370565b5b60006129a8868287016125bd565b93505060206129b986828701612508565b925050604084013567ffffffffffffffff8111156129da576129d9612375565b5b6129e686828701612953565b9150509250925092565b60008060408385031215612a0757612a06612370565b5b6000612a15858286016125bd565b9250506020612a26858286016125bd565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612a7757607f821691505b602082108103612a8a57612a89612a30565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612aec602183612440565b9150612af782612a90565b604082019050919050565b60006020820190508181036000830152612b1b81612adf565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b6000612b7e603e83612440565b9150612b8982612b22565b604082019050919050565b60006020820190508181036000830152612bad81612b71565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b6000612c10602e83612440565b9150612c1b82612bb4565b604082019050919050565b60006020820190508181036000830152612c3f81612c03565b9050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b6000612ca2602b83612440565b9150612cad82612c46565b604082019050919050565b60006020820190508181036000830152612cd181612c95565b9050919050565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b6000612d34602c83612440565b9150612d3f82612cd8565b604082019050919050565b60006020820190508181036000830152612d6381612d27565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000612dcf601883612440565b9150612dda82612d99565b602082019050919050565b60006020820190508181036000830152612dfe81612dc2565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612e61602983612440565b9150612e6c82612e05565b604082019050919050565b60006020820190508181036000830152612e9081612e54565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612ef3602683612440565b9150612efe82612e97565b604082019050919050565b60006020820190508181036000830152612f2281612ee6565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000612f85602583612440565b9150612f9082612f29565b604082019050919050565b60006020820190508181036000830152612fb481612f78565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000613017602483612440565b915061302282612fbb565b604082019050919050565b600060208201905081810360008301526130468161300a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613087826124e7565b9150613092836124e7565b92508282039050818111156130aa576130a961304d565b5b92915050565b60006130bb826124e7565b91506130c6836124e7565b92508282019050808211156130de576130dd61304d565b5b92915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061311a602083612440565b9150613125826130e4565b602082019050919050565b600060208201905081810360008301526131498161310d565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000613186601983612440565b915061319182613150565b602082019050919050565b600060208201905081810360008301526131b581613179565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000613218603283612440565b9150613223826131bc565b604082019050919050565b600060208201905081810360008301526132478161320b565b9050919050565b600081905092915050565b600061326482612435565b61326e818561324e565b935061327e818560208601612451565b80840191505092915050565b60006132968285613259565b91506132a28284613259565b91508190509392505050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b600061330a602e83612440565b9150613315826132ae565b604082019050919050565b60006020820190508181036000830152613339816132fd565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026133a27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613365565b6133ac8683613365565b95508019841693508086168417925050509392505050565b6000819050919050565b60006133e96133e46133df846124e7565b6133c4565b6124e7565b9050919050565b6000819050919050565b613403836133ce565b61341761340f826133f0565b848454613372565b825550505050565b600090565b61342c61341f565b6134378184846133fa565b505050565b5b8181101561345b57613450600082613424565b60018101905061343d565b5050565b601f8211156134a05761347181613340565b61347a84613355565b81016020851015613489578190505b61349d61349585613355565b83018261343c565b50505b505050565b600082821c905092915050565b60006134c3600019846008026134a5565b1980831691505092915050565b60006134dc83836134b2565b9150826002028217905092915050565b6134f582612435565b67ffffffffffffffff81111561350e5761350d612732565b5b6135188254612a5f565b61352382828561345f565b600060209050601f8311600181146135565760008415613544578287015190505b61354e85826134d0565b8655506135b6565b601f19841661356486613340565b60005b8281101561358c57848901518255600182019150602085019450602081019050613567565b868310156135a957848901516135a5601f8916826134b2565b8355505b6001600288020188555050505b505050505050565b600081519050919050565b600082825260208201905092915050565b60006135e5826135be565b6135ef81856135c9565b93506135ff818560208601612451565b6136088161247b565b840191505092915050565b6000608082019050613628600083018761257c565b613635602083018661257c565b6136426040830185612612565b818103606083015261365481846135da565b905095945050505050565b60008151905061366e816123a6565b92915050565b60006020828403121561368a57613689612370565b5b60006136988482850161365f565b91505092915050565b60006136ac826124e7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036136de576136dd61304d565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613723826124e7565b915061372e836124e7565b92508261373e5761373d6136e9565b5b828204905092915050565b6000613754826124e7565b915061375f836124e7565b92508261376f5761376e6136e9565b5b828206905092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006137b0602083612440565b91506137bb8261377a565b602082019050919050565b600060208201905081810360008301526137df816137a3565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b600061381c601c83612440565b9150613827826137e6565b602082019050919050565b6000602082019050818103600083015261384b8161380f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220d8218345061acf0369502bea11a6e1f900cb081d547ad5766ed4bfe89409896564736f6c63430008100033"
                    const abi = [
                        {
                            "inputs": [
                                {
                                    "internalType": "string",
                                    "name": "_tokenName",
                                    "type": "string"
                                },
                                {
                                    "internalType": "string",
                                    "name": "_tokenSymbol",
                                    "type": "string"
                                },
                                {
                                    "internalType": "string",
                                    "name": "_baseUri",
                                    "type": "string"
                                }
                            ],
                            "stateMutability": "nonpayable",
                            "type": "constructor"
                        },
                        {
                            "anonymous": false,
                            "inputs": [
                                {
                                    "indexed": true,
                                    "internalType": "address",
                                    "name": "owner",
                                    "type": "address"
                                },
                                {
                                    "indexed": true,
                                    "internalType": "address",
                                    "name": "approved",
                                    "type": "address"
                                },
                                {
                                    "indexed": true,
                                    "internalType": "uint256",
                                    "name": "tokenId",
                                    "type": "uint256"
                                }
                            ],
                            "name": "Approval",
                            "type": "event"
                        },
                        {
                            "anonymous": false,
                            "inputs": [
                                {
                                    "indexed": true,
                                    "internalType": "address",
                                    "name": "owner",
                                    "type": "address"
                                },
                                {
                                    "indexed": true,
                                    "internalType": "address",
                                    "name": "operator",
                                    "type": "address"
                                },
                                {
                                    "indexed": false,
                                    "internalType": "bool",
                                    "name": "approved",
                                    "type": "bool"
                                }
                            ],
                            "name": "ApprovalForAll",
                            "type": "event"
                        },
                        {
                            "anonymous": false,
                            "inputs": [
                                {
                                    "indexed": true,
                                    "internalType": "address",
                                    "name": "previousOwner",
                                    "type": "address"
                                },
                                {
                                    "indexed": true,
                                    "internalType": "address",
                                    "name": "newOwner",
                                    "type": "address"
                                }
                            ],
                            "name": "OwnershipTransferred",
                            "type": "event"
                        },
                        {
                            "anonymous": false,
                            "inputs": [
                                {
                                    "indexed": true,
                                    "internalType": "address",
                                    "name": "from",
                                    "type": "address"
                                },
                                {
                                    "indexed": true,
                                    "internalType": "address",
                                    "name": "to",
                                    "type": "address"
                                },
                                {
                                    "indexed": true,
                                    "internalType": "uint256",
                                    "name": "tokenId",
                                    "type": "uint256"
                                }
                            ],
                            "name": "Transfer",
                            "type": "event"
                        },
                        {
                            "inputs": [],
                            "name": "_baseURI",
                            "outputs": [
                                {
                                    "internalType": "string",
                                    "name": "",
                                    "type": "string"
                                }
                            ],
                            "stateMutability": "view",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "address",
                                    "name": "to",
                                    "type": "address"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "tokenId",
                                    "type": "uint256"
                                }
                            ],
                            "name": "approve",
                            "outputs": [],
                            "stateMutability": "nonpayable",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "address",
                                    "name": "owner",
                                    "type": "address"
                                }
                            ],
                            "name": "balanceOf",
                            "outputs": [
                                {
                                    "internalType": "uint256",
                                    "name": "",
                                    "type": "uint256"
                                }
                            ],
                            "stateMutability": "view",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "uint256",
                                    "name": "tokenId",
                                    "type": "uint256"
                                }
                            ],
                            "name": "burn",
                            "outputs": [],
                            "stateMutability": "nonpayable",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "uint256",
                                    "name": "tokenId",
                                    "type": "uint256"
                                }
                            ],
                            "name": "getApproved",
                            "outputs": [
                                {
                                    "internalType": "address",
                                    "name": "",
                                    "type": "address"
                                }
                            ],
                            "stateMutability": "view",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "address",
                                    "name": "owner",
                                    "type": "address"
                                },
                                {
                                    "internalType": "address",
                                    "name": "operator",
                                    "type": "address"
                                }
                            ],
                            "name": "isApprovedForAll",
                            "outputs": [
                                {
                                    "internalType": "bool",
                                    "name": "",
                                    "type": "bool"
                                }
                            ],
                            "stateMutability": "view",
                            "type": "function"
                        },
                        {
                            "inputs": [],
                            "name": "name",
                            "outputs": [
                                {
                                    "internalType": "string",
                                    "name": "",
                                    "type": "string"
                                }
                            ],
                            "stateMutability": "view",
                            "type": "function"
                        },
                        {
                            "inputs": [],
                            "name": "owner",
                            "outputs": [
                                {
                                    "internalType": "address",
                                    "name": "",
                                    "type": "address"
                                }
                            ],
                            "stateMutability": "view",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "uint256",
                                    "name": "tokenId",
                                    "type": "uint256"
                                }
                            ],
                            "name": "ownerOf",
                            "outputs": [
                                {
                                    "internalType": "address",
                                    "name": "",
                                    "type": "address"
                                }
                            ],
                            "stateMutability": "view",
                            "type": "function"
                        },
                        {
                            "inputs": [],
                            "name": "renounceOwnership",
                            "outputs": [],
                            "stateMutability": "nonpayable",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "address",
                                    "name": "to",
                                    "type": "address"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "tokenId",
                                    "type": "uint256"
                                },
                                {
                                    "internalType": "string",
                                    "name": "uri",
                                    "type": "string"
                                }
                            ],
                            "name": "safeMint",
                            "outputs": [],
                            "stateMutability": "nonpayable",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "address",
                                    "name": "from",
                                    "type": "address"
                                },
                                {
                                    "internalType": "address",
                                    "name": "to",
                                    "type": "address"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "tokenId",
                                    "type": "uint256"
                                }
                            ],
                            "name": "safeTransferFrom",
                            "outputs": [],
                            "stateMutability": "nonpayable",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "address",
                                    "name": "from",
                                    "type": "address"
                                },
                                {
                                    "internalType": "address",
                                    "name": "to",
                                    "type": "address"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "tokenId",
                                    "type": "uint256"
                                },
                                {
                                    "internalType": "bytes",
                                    "name": "data",
                                    "type": "bytes"
                                }
                            ],
                            "name": "safeTransferFrom",
                            "outputs": [],
                            "stateMutability": "nonpayable",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "address",
                                    "name": "operator",
                                    "type": "address"
                                },
                                {
                                    "internalType": "bool",
                                    "name": "approved",
                                    "type": "bool"
                                }
                            ],
                            "name": "setApprovalForAll",
                            "outputs": [],
                            "stateMutability": "nonpayable",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "bytes4",
                                    "name": "interfaceId",
                                    "type": "bytes4"
                                }
                            ],
                            "name": "supportsInterface",
                            "outputs": [
                                {
                                    "internalType": "bool",
                                    "name": "",
                                    "type": "bool"
                                }
                            ],
                            "stateMutability": "view",
                            "type": "function"
                        },
                        {
                            "inputs": [],
                            "name": "symbol",
                            "outputs": [
                                {
                                    "internalType": "string",
                                    "name": "",
                                    "type": "string"
                                }
                            ],
                            "stateMutability": "view",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "uint256",
                                    "name": "index",
                                    "type": "uint256"
                                }
                            ],
                            "name": "tokenByIndex",
                            "outputs": [
                                {
                                    "internalType": "uint256",
                                    "name": "",
                                    "type": "uint256"
                                }
                            ],
                            "stateMutability": "view",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "address",
                                    "name": "owner",
                                    "type": "address"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "index",
                                    "type": "uint256"
                                }
                            ],
                            "name": "tokenOfOwnerByIndex",
                            "outputs": [
                                {
                                    "internalType": "uint256",
                                    "name": "",
                                    "type": "uint256"
                                }
                            ],
                            "stateMutability": "view",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "uint256",
                                    "name": "tokenId",
                                    "type": "uint256"
                                }
                            ],
                            "name": "tokenURI",
                            "outputs": [
                                {
                                    "internalType": "string",
                                    "name": "",
                                    "type": "string"
                                }
                            ],
                            "stateMutability": "view",
                            "type": "function"
                        },
                        {
                            "inputs": [],
                            "name": "totalSupply",
                            "outputs": [
                                {
                                    "internalType": "uint256",
                                    "name": "",
                                    "type": "uint256"
                                }
                            ],
                            "stateMutability": "view",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "address",
                                    "name": "from",
                                    "type": "address"
                                },
                                {
                                    "internalType": "address",
                                    "name": "to",
                                    "type": "address"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "tokenId",
                                    "type": "uint256"
                                }
                            ],
                            "name": "transferFrom",
                            "outputs": [],
                            "stateMutability": "nonpayable",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "address",
                                    "name": "newOwner",
                                    "type": "address"
                                }
                            ],
                            "name": "transferOwnership",
                            "outputs": [],
                            "stateMutability": "nonpayable",
                            "type": "function"
                        }
                    ]
                    // const web3 = new Web3("https://api.avax-test.network/ext/bc/C/rpc");
                    const deploy = async () => {
                        winlog.info('Attempting to deploy from account:', address);
                        winlog.info(loanid, poolid, hash);
                        // const accounts = await web3.eth.getAccounts();
                        // winlog.info(accounts)
                        //0x5323d470086D811fF6d6153bf9f35AF354C92Fde
                        const incrementer = new web3.eth.Contract(abi, address);

                        const incrementerTx = incrementer.deploy({
                            data: bytecode,
                            arguments: [loanid, poolid, hash],
                        })
                        const createTransaction = await web3.eth.accounts.signTransaction({
                            from: address,
                            data: incrementerTx.encodeABI(),
                            gas: 8000000,
                            chainId: "101122"
                        },
                            privKey
                        )
                        const createReceipt = new web3.eth.sendSignedTransaction(createTransaction.rawTransaction).then((res) => {
                            winlog.info('Contract deployed at address', res.contractAddress);

                            resolve(res.contractAddress);

                        });
                    };

                    deploy()

                });
            }

            async function getissueraccountaddress(issuerId) {
                return new Promise((resolve, reject) => {
                    //const web3 = new Web3("https://api.avax-test.network/ext/bc/C/rpc");
                    const contractPath = path.join(process.cwd() + "/api/contracts/User.sol");
                    winlog.info("contractpath:: " + contractPath);
                    const contractname = "User"
                    var contractAddress = "0x406B4E6c6B050aFf6BfF6E06D60BD664fb657DB4"
                    // const contractPath = path.join('/home/somiya/Documents/IntainMarkets/IM Node app/api/contracts/CreatePool.sol');
                    const source = fs.readFileSync(contractPath, 'utf8');

                    const input = {
                        language: 'Solidity',
                        sources: {
                            [contractname + ".sol"]: {
                                content: source,
                            },
                        },
                        settings: {
                            outputSelection: {
                                '*': {
                                    '*': ['*'],
                                },
                            },
                        },
                    };

                    const tempFile = JSON.parse(solc.compile(JSON.stringify(input)));
                    //winlog.info(tempFile)
                    const contractFile = tempFile.contracts[contractname + ".sol"][contractname];
                    //winlog.info(contractFile)

                    const bytecode = contractFile.evm.bytecode.object;
                    const abi = contractFile.abi;

                    const incrementer = new web3.eth.Contract(abi, contractAddress);
                    const get1 = async () => {
                        winlog.info(`Making a call to contract at address ${contractAddress}`);
                        const data = await incrementer.methods
                            .getUserById(issuerId)
                            .call({ from: address });
                        //  winlog.info("data:: " + JSON.stringify(data));
                        // winlog.info(`The current string is: ` + data);
                        // var response ={ "result":JSON.stringify(data)}
                        // winlog.info(response)
                        var response = { "result": JSON.stringify(data) }
                        var finalresponse = JSON.parse(response.result)
                        winlog.info(finalresponse)
                        winlog.info("account address::::: " + finalresponse[4])
                        resolve(finalresponse[4])
                    };

                    get1();
                });
            }

            async function TransferOwnerShip(deployedaddress, issueraddress) {
                return new Promise((resolve, reject) => {
                    const contractAddress = deployedaddress;// Contract Call
                    winlog.info("\nownership details::: deployed address " + deployedaddress + "  issuer acc address" + issueraddress)
                    const abi = [
                        {
                            "inputs": [
                                {
                                    "internalType": "string",
                                    "name": "_tokenName",
                                    "type": "string"
                                },
                                {
                                    "internalType": "string",
                                    "name": "_tokenSymbol",
                                    "type": "string"
                                },
                                {
                                    "internalType": "string",
                                    "name": "_baseUri",
                                    "type": "string"
                                }
                            ],
                            "stateMutability": "nonpayable",
                            "type": "constructor"
                        },
                        {
                            "anonymous": false,
                            "inputs": [
                                {
                                    "indexed": true,
                                    "internalType": "address",
                                    "name": "owner",
                                    "type": "address"
                                },
                                {
                                    "indexed": true,
                                    "internalType": "address",
                                    "name": "approved",
                                    "type": "address"
                                },
                                {
                                    "indexed": true,
                                    "internalType": "uint256",
                                    "name": "tokenId",
                                    "type": "uint256"
                                }
                            ],
                            "name": "Approval",
                            "type": "event"
                        },
                        {
                            "anonymous": false,
                            "inputs": [
                                {
                                    "indexed": true,
                                    "internalType": "address",
                                    "name": "owner",
                                    "type": "address"
                                },
                                {
                                    "indexed": true,
                                    "internalType": "address",
                                    "name": "operator",
                                    "type": "address"
                                },
                                {
                                    "indexed": false,
                                    "internalType": "bool",
                                    "name": "approved",
                                    "type": "bool"
                                }
                            ],
                            "name": "ApprovalForAll",
                            "type": "event"
                        },
                        {
                            "anonymous": false,
                            "inputs": [
                                {
                                    "indexed": true,
                                    "internalType": "address",
                                    "name": "previousOwner",
                                    "type": "address"
                                },
                                {
                                    "indexed": true,
                                    "internalType": "address",
                                    "name": "newOwner",
                                    "type": "address"
                                }
                            ],
                            "name": "OwnershipTransferred",
                            "type": "event"
                        },
                        {
                            "anonymous": false,
                            "inputs": [
                                {
                                    "indexed": true,
                                    "internalType": "address",
                                    "name": "from",
                                    "type": "address"
                                },
                                {
                                    "indexed": true,
                                    "internalType": "address",
                                    "name": "to",
                                    "type": "address"
                                },
                                {
                                    "indexed": true,
                                    "internalType": "uint256",
                                    "name": "tokenId",
                                    "type": "uint256"
                                }
                            ],
                            "name": "Transfer",
                            "type": "event"
                        },
                        {
                            "inputs": [],
                            "name": "_baseURI",
                            "outputs": [
                                {
                                    "internalType": "string",
                                    "name": "",
                                    "type": "string"
                                }
                            ],
                            "stateMutability": "view",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "address",
                                    "name": "to",
                                    "type": "address"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "tokenId",
                                    "type": "uint256"
                                }
                            ],
                            "name": "approve",
                            "outputs": [],
                            "stateMutability": "nonpayable",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "address",
                                    "name": "owner",
                                    "type": "address"
                                }
                            ],
                            "name": "balanceOf",
                            "outputs": [
                                {
                                    "internalType": "uint256",
                                    "name": "",
                                    "type": "uint256"
                                }
                            ],
                            "stateMutability": "view",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "uint256",
                                    "name": "tokenId",
                                    "type": "uint256"
                                }
                            ],
                            "name": "burn",
                            "outputs": [],
                            "stateMutability": "nonpayable",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "uint256",
                                    "name": "tokenId",
                                    "type": "uint256"
                                }
                            ],
                            "name": "getApproved",
                            "outputs": [
                                {
                                    "internalType": "address",
                                    "name": "",
                                    "type": "address"
                                }
                            ],
                            "stateMutability": "view",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "address",
                                    "name": "owner",
                                    "type": "address"
                                },
                                {
                                    "internalType": "address",
                                    "name": "operator",
                                    "type": "address"
                                }
                            ],
                            "name": "isApprovedForAll",
                            "outputs": [
                                {
                                    "internalType": "bool",
                                    "name": "",
                                    "type": "bool"
                                }
                            ],
                            "stateMutability": "view",
                            "type": "function"
                        },
                        {
                            "inputs": [],
                            "name": "name",
                            "outputs": [
                                {
                                    "internalType": "string",
                                    "name": "",
                                    "type": "string"
                                }
                            ],
                            "stateMutability": "view",
                            "type": "function"
                        },
                        {
                            "inputs": [],
                            "name": "owner",
                            "outputs": [
                                {
                                    "internalType": "address",
                                    "name": "",
                                    "type": "address"
                                }
                            ],
                            "stateMutability": "view",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "uint256",
                                    "name": "tokenId",
                                    "type": "uint256"
                                }
                            ],
                            "name": "ownerOf",
                            "outputs": [
                                {
                                    "internalType": "address",
                                    "name": "",
                                    "type": "address"
                                }
                            ],
                            "stateMutability": "view",
                            "type": "function"
                        },
                        {
                            "inputs": [],
                            "name": "renounceOwnership",
                            "outputs": [],
                            "stateMutability": "nonpayable",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "address",
                                    "name": "to",
                                    "type": "address"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "tokenId",
                                    "type": "uint256"
                                },
                                {
                                    "internalType": "string",
                                    "name": "uri",
                                    "type": "string"
                                }
                            ],
                            "name": "safeMint",
                            "outputs": [],
                            "stateMutability": "nonpayable",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "address",
                                    "name": "from",
                                    "type": "address"
                                },
                                {
                                    "internalType": "address",
                                    "name": "to",
                                    "type": "address"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "tokenId",
                                    "type": "uint256"
                                }
                            ],
                            "name": "safeTransferFrom",
                            "outputs": [],
                            "stateMutability": "nonpayable",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "address",
                                    "name": "from",
                                    "type": "address"
                                },
                                {
                                    "internalType": "address",
                                    "name": "to",
                                    "type": "address"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "tokenId",
                                    "type": "uint256"
                                },
                                {
                                    "internalType": "bytes",
                                    "name": "data",
                                    "type": "bytes"
                                }
                            ],
                            "name": "safeTransferFrom",
                            "outputs": [],
                            "stateMutability": "nonpayable",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "address",
                                    "name": "operator",
                                    "type": "address"
                                },
                                {
                                    "internalType": "bool",
                                    "name": "approved",
                                    "type": "bool"
                                }
                            ],
                            "name": "setApprovalForAll",
                            "outputs": [],
                            "stateMutability": "nonpayable",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "bytes4",
                                    "name": "interfaceId",
                                    "type": "bytes4"
                                }
                            ],
                            "name": "supportsInterface",
                            "outputs": [
                                {
                                    "internalType": "bool",
                                    "name": "",
                                    "type": "bool"
                                }
                            ],
                            "stateMutability": "view",
                            "type": "function"
                        },
                        {
                            "inputs": [],
                            "name": "symbol",
                            "outputs": [
                                {
                                    "internalType": "string",
                                    "name": "",
                                    "type": "string"
                                }
                            ],
                            "stateMutability": "view",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "uint256",
                                    "name": "index",
                                    "type": "uint256"
                                }
                            ],
                            "name": "tokenByIndex",
                            "outputs": [
                                {
                                    "internalType": "uint256",
                                    "name": "",
                                    "type": "uint256"
                                }
                            ],
                            "stateMutability": "view",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "address",
                                    "name": "owner",
                                    "type": "address"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "index",
                                    "type": "uint256"
                                }
                            ],
                            "name": "tokenOfOwnerByIndex",
                            "outputs": [
                                {
                                    "internalType": "uint256",
                                    "name": "",
                                    "type": "uint256"
                                }
                            ],
                            "stateMutability": "view",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "uint256",
                                    "name": "tokenId",
                                    "type": "uint256"
                                }
                            ],
                            "name": "tokenURI",
                            "outputs": [
                                {
                                    "internalType": "string",
                                    "name": "",
                                    "type": "string"
                                }
                            ],
                            "stateMutability": "view",
                            "type": "function"
                        },
                        {
                            "inputs": [],
                            "name": "totalSupply",
                            "outputs": [
                                {
                                    "internalType": "uint256",
                                    "name": "",
                                    "type": "uint256"
                                }
                            ],
                            "stateMutability": "view",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "address",
                                    "name": "from",
                                    "type": "address"
                                },
                                {
                                    "internalType": "address",
                                    "name": "to",
                                    "type": "address"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "tokenId",
                                    "type": "uint256"
                                }
                            ],
                            "name": "transferFrom",
                            "outputs": [],
                            "stateMutability": "nonpayable",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "address",
                                    "name": "newOwner",
                                    "type": "address"
                                }
                            ],
                            "name": "transferOwnership",
                            "outputs": [],
                            "stateMutability": "nonpayable",
                            "type": "function"
                        }
                    ]
                    const incrementer = new web3.eth.Contract(abi, contractAddress);

                    const encoded = incrementer.methods.transferOwnership(issueraddress).encodeABI();
                    const increment = async () => {
                        winlog.info(
                            `Calling the function in contract at address ${contractAddress}`
                        );
                        const createTransaction = await web3.eth.accounts.signTransaction(
                            {
                                from: address,
                                to: contractAddress,
                                data: encoded,
                                gasLimit: 6000000,
                                chainId: "101122"
                            },
                            privKey
                        ); const createReceipt = await web3.eth.sendSignedTransaction(
                            createTransaction.rawTransaction
                        );
                        winlog.info(`transfer owership successfull with hash: ${createReceipt.transactionHash} for the contractaddress ${contractAddress}\n`);
                        resolve("transfer owner ship success")
                    }; increment();
                });

            }

            async function safemint(contractaddress, uri, NFTowner) {

                return new Promise((resolve, reject) => {
                    const contractAddress = contractaddress;// Contract Call
                    winlog.info("\n" + contractaddress + " " + uri)
                    const abi = [
                        {
                            "inputs": [
                                {
                                    "internalType": "string",
                                    "name": "_tokenName",
                                    "type": "string"
                                },
                                {
                                    "internalType": "string",
                                    "name": "_tokenSymbol",
                                    "type": "string"
                                },
                                {
                                    "internalType": "string",
                                    "name": "_baseUri",
                                    "type": "string"
                                }
                            ],
                            "stateMutability": "nonpayable",
                            "type": "constructor"
                        },
                        {
                            "anonymous": false,
                            "inputs": [
                                {
                                    "indexed": true,
                                    "internalType": "address",
                                    "name": "owner",
                                    "type": "address"
                                },
                                {
                                    "indexed": true,
                                    "internalType": "address",
                                    "name": "approved",
                                    "type": "address"
                                },
                                {
                                    "indexed": true,
                                    "internalType": "uint256",
                                    "name": "tokenId",
                                    "type": "uint256"
                                }
                            ],
                            "name": "Approval",
                            "type": "event"
                        },
                        {
                            "anonymous": false,
                            "inputs": [
                                {
                                    "indexed": true,
                                    "internalType": "address",
                                    "name": "owner",
                                    "type": "address"
                                },
                                {
                                    "indexed": true,
                                    "internalType": "address",
                                    "name": "operator",
                                    "type": "address"
                                },
                                {
                                    "indexed": false,
                                    "internalType": "bool",
                                    "name": "approved",
                                    "type": "bool"
                                }
                            ],
                            "name": "ApprovalForAll",
                            "type": "event"
                        },
                        {
                            "anonymous": false,
                            "inputs": [
                                {
                                    "indexed": true,
                                    "internalType": "address",
                                    "name": "previousOwner",
                                    "type": "address"
                                },
                                {
                                    "indexed": true,
                                    "internalType": "address",
                                    "name": "newOwner",
                                    "type": "address"
                                }
                            ],
                            "name": "OwnershipTransferred",
                            "type": "event"
                        },
                        {
                            "anonymous": false,
                            "inputs": [
                                {
                                    "indexed": true,
                                    "internalType": "address",
                                    "name": "from",
                                    "type": "address"
                                },
                                {
                                    "indexed": true,
                                    "internalType": "address",
                                    "name": "to",
                                    "type": "address"
                                },
                                {
                                    "indexed": true,
                                    "internalType": "uint256",
                                    "name": "tokenId",
                                    "type": "uint256"
                                }
                            ],
                            "name": "Transfer",
                            "type": "event"
                        },
                        {
                            "inputs": [],
                            "name": "_baseURI",
                            "outputs": [
                                {
                                    "internalType": "string",
                                    "name": "",
                                    "type": "string"
                                }
                            ],
                            "stateMutability": "view",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "address",
                                    "name": "to",
                                    "type": "address"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "tokenId",
                                    "type": "uint256"
                                }
                            ],
                            "name": "approve",
                            "outputs": [],
                            "stateMutability": "nonpayable",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "address",
                                    "name": "owner",
                                    "type": "address"
                                }
                            ],
                            "name": "balanceOf",
                            "outputs": [
                                {
                                    "internalType": "uint256",
                                    "name": "",
                                    "type": "uint256"
                                }
                            ],
                            "stateMutability": "view",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "uint256",
                                    "name": "tokenId",
                                    "type": "uint256"
                                }
                            ],
                            "name": "burn",
                            "outputs": [],
                            "stateMutability": "nonpayable",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "uint256",
                                    "name": "tokenId",
                                    "type": "uint256"
                                }
                            ],
                            "name": "getApproved",
                            "outputs": [
                                {
                                    "internalType": "address",
                                    "name": "",
                                    "type": "address"
                                }
                            ],
                            "stateMutability": "view",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "address",
                                    "name": "owner",
                                    "type": "address"
                                },
                                {
                                    "internalType": "address",
                                    "name": "operator",
                                    "type": "address"
                                }
                            ],
                            "name": "isApprovedForAll",
                            "outputs": [
                                {
                                    "internalType": "bool",
                                    "name": "",
                                    "type": "bool"
                                }
                            ],
                            "stateMutability": "view",
                            "type": "function"
                        },
                        {
                            "inputs": [],
                            "name": "name",
                            "outputs": [
                                {
                                    "internalType": "string",
                                    "name": "",
                                    "type": "string"
                                }
                            ],
                            "stateMutability": "view",
                            "type": "function"
                        },
                        {
                            "inputs": [],
                            "name": "owner",
                            "outputs": [
                                {
                                    "internalType": "address",
                                    "name": "",
                                    "type": "address"
                                }
                            ],
                            "stateMutability": "view",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "uint256",
                                    "name": "tokenId",
                                    "type": "uint256"
                                }
                            ],
                            "name": "ownerOf",
                            "outputs": [
                                {
                                    "internalType": "address",
                                    "name": "",
                                    "type": "address"
                                }
                            ],
                            "stateMutability": "view",
                            "type": "function"
                        },
                        {
                            "inputs": [],
                            "name": "renounceOwnership",
                            "outputs": [],
                            "stateMutability": "nonpayable",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "address",
                                    "name": "to",
                                    "type": "address"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "tokenId",
                                    "type": "uint256"
                                },
                                {
                                    "internalType": "string",
                                    "name": "uri",
                                    "type": "string"
                                }
                            ],
                            "name": "safeMint",
                            "outputs": [],
                            "stateMutability": "nonpayable",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "address",
                                    "name": "from",
                                    "type": "address"
                                },
                                {
                                    "internalType": "address",
                                    "name": "to",
                                    "type": "address"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "tokenId",
                                    "type": "uint256"
                                }
                            ],
                            "name": "safeTransferFrom",
                            "outputs": [],
                            "stateMutability": "nonpayable",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "address",
                                    "name": "from",
                                    "type": "address"
                                },
                                {
                                    "internalType": "address",
                                    "name": "to",
                                    "type": "address"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "tokenId",
                                    "type": "uint256"
                                },
                                {
                                    "internalType": "bytes",
                                    "name": "data",
                                    "type": "bytes"
                                }
                            ],
                            "name": "safeTransferFrom",
                            "outputs": [],
                            "stateMutability": "nonpayable",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "address",
                                    "name": "operator",
                                    "type": "address"
                                },
                                {
                                    "internalType": "bool",
                                    "name": "approved",
                                    "type": "bool"
                                }
                            ],
                            "name": "setApprovalForAll",
                            "outputs": [],
                            "stateMutability": "nonpayable",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "bytes4",
                                    "name": "interfaceId",
                                    "type": "bytes4"
                                }
                            ],
                            "name": "supportsInterface",
                            "outputs": [
                                {
                                    "internalType": "bool",
                                    "name": "",
                                    "type": "bool"
                                }
                            ],
                            "stateMutability": "view",
                            "type": "function"
                        },
                        {
                            "inputs": [],
                            "name": "symbol",
                            "outputs": [
                                {
                                    "internalType": "string",
                                    "name": "",
                                    "type": "string"
                                }
                            ],
                            "stateMutability": "view",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "uint256",
                                    "name": "index",
                                    "type": "uint256"
                                }
                            ],
                            "name": "tokenByIndex",
                            "outputs": [
                                {
                                    "internalType": "uint256",
                                    "name": "",
                                    "type": "uint256"
                                }
                            ],
                            "stateMutability": "view",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "address",
                                    "name": "owner",
                                    "type": "address"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "index",
                                    "type": "uint256"
                                }
                            ],
                            "name": "tokenOfOwnerByIndex",
                            "outputs": [
                                {
                                    "internalType": "uint256",
                                    "name": "",
                                    "type": "uint256"
                                }
                            ],
                            "stateMutability": "view",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "uint256",
                                    "name": "tokenId",
                                    "type": "uint256"
                                }
                            ],
                            "name": "tokenURI",
                            "outputs": [
                                {
                                    "internalType": "string",
                                    "name": "",
                                    "type": "string"
                                }
                            ],
                            "stateMutability": "view",
                            "type": "function"
                        },
                        {
                            "inputs": [],
                            "name": "totalSupply",
                            "outputs": [
                                {
                                    "internalType": "uint256",
                                    "name": "",
                                    "type": "uint256"
                                }
                            ],
                            "stateMutability": "view",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "address",
                                    "name": "from",
                                    "type": "address"
                                },
                                {
                                    "internalType": "address",
                                    "name": "to",
                                    "type": "address"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "tokenId",
                                    "type": "uint256"
                                }
                            ],
                            "name": "transferFrom",
                            "outputs": [],
                            "stateMutability": "nonpayable",
                            "type": "function"
                        },
                        {
                            "inputs": [
                                {
                                    "internalType": "address",
                                    "name": "newOwner",
                                    "type": "address"
                                }
                            ],
                            "name": "transferOwnership",
                            "outputs": [],
                            "stateMutability": "nonpayable",
                            "type": "function"
                        }
                    ]
                    const incrementer = new web3.eth.Contract(abi, contractAddress);

                    const encoded = incrementer.methods.safeMint(NFTowner, 1, uri).encodeABI();
                    const increment = async () => {
                        winlog.info(
                            `Calling the function in contract at address ${contractAddress}`
                        );
                        const createTransaction = await web3.eth.accounts.signTransaction(
                            {
                                from: address,
                                to: contractAddress,
                                data: encoded,
                                gasLimit: 6000000,
                                chainId: "101122"
                            },
                            privKey
                        ); const createReceipt = await web3.eth.sendSignedTransaction(
                            createTransaction.rawTransaction
                        );
                        winlog.info(`safemint successfull with hash: ${createReceipt.transactionHash} for the contractaddress ${contractaddress}\n`);
                        resolve("success")
                    }; increment();
                });
            }

            async function loancontractsave(deployedaddress, result) {

                return new Promise((resolve, reject) => {
                    const contractAddress = "0x217ED71D1b15e6ff20FA3559C1e4ad24f7011Fd0";// Contract Call
                    var loansave = JSON.stringify(result)
                    winlog.info("inputdata::::: " + loansave);
                    var finalloanarr = []
                    finalloanarr.push([deployedaddress, result.loanid, req.body.poolid, loansave])
                    const contractPath = path.join(process.cwd(), '/api/contracts/' + "LoanContract.sol");
                    const contractname = "LoanContract";
                    const source = fs.readFileSync(contractPath, 'utf8');

                    const input = {
                        language: 'Solidity',
                        sources: {
                            [contractname + ".sol"]: {
                                content: source,
                            },
                        },
                        settings: {
                            outputSelection: {
                                '*': {
                                    '*': ['*'],
                                },
                            },
                        },
                    };

                    const tempFile = JSON.parse(solc.compile(JSON.stringify(input)));
                    //winlog.info(tempFile)
                    const contractFile = tempFile.contracts[contractname + ".sol"][contractname];
                    //winlog.info(contractFile)
                    //const bytecode = contractFile.evm.bytecode.object;
                    const abi = contractFile.abi;
                    const incrementer = new web3.eth.Contract(abi, contractAddress);
                    winlog.info("final loan array:::::::::::::::" + finalloanarr)
                    const encoded = incrementer.methods.createLoansArray(finalloanarr).encodeABI();
                    winlog.info("DF")
                    const increment = async () => {
                        winlog.info(
                            `Calling the increment by ${"updated value"} function in contract at address ${contractAddress}`
                        );
                        const createTransaction = await web3.eth.accounts.signTransaction(
                            {
                                from: address,
                                to: contractAddress,
                                data: encoded,
                                gasLimit: 6000000,
                                chainId: "101122"
                            },
                            privKey
                        ); const createReceipt = await web3.eth.sendSignedTransaction(
                            createTransaction.rawTransaction
                        );
                        winlog.info(`Tx successfull with hash: ${createReceipt.transactionHash}`);
                        resolve("loan save success")
                    }; increment();
                });
            }

            IpfsEmitter.on('statuschange', () => {
                MongoClient.connect(url, function (err, client) {
                    const db = client.db("IntainMarkets");
                    db.collection("lms").updateMany({ poolid: req.body.poolid }, { $set: { lmsstatus: "reviewed" } }, function (err, result) {
                        if (err) throw err;
                        var s1 = new Date();
                        winlog.info("date ::::::::"+s1)
                        winlog.info("NFT MINT Completed at ::::: " + s1.getHours() + " " + s1.getMinutes() + " " + s.getSeconds());
                        winlog.info("lms status change done and nft mint complete")
                        // poolEmitter.emit('fetchpooldetails')
                        // res.send({ "success": true, "message": "NFT minted" });
                        //   IpfsEmitter.emit('contractstatuschange')
                    });
                })


            })

            // poolEmitter.on('fetchpooldetails', () => {
            //     winlog.info("inside fetch pool details");
            //     MongoClient.connect(url, function (err, client) {
            //         const db = client.db("IntainMarkets");
            //         db.collection('pool_detail').find({ poolID: req.body.poolid }).toArray(function (err, result) {
            //             winlog.info("res:: " + result.length);
            //             if (result.length > 0) {
            //                 winlog.info("pool data:::" + JSON.stringify(result))
            //                 //getlmsdata(result,loanmap)

            //                 var pooldetails = [[result[0].uniqueID, result[0].poolID, result[0].poolname, result[0].issuerId, result[0].assetclass, result[0].assignverification, result[0].assignservicer, result[0].assignunderwriter, result[0].numberofloans, result[0].setupdate, result[0].originalbalance, "Verified", result[0].loanids, result[0].typename, result[0].filepath, result[0].typepurpose, result[0].attributes, result[0].issuerName,result[0].assignpayingagent]];
            //                 winlog.info(pooldetails);
            //                 poolcreate(pooldetails)
            //                 winlog.info("done");
            //             }
            //         });

            //     })
            // })
            // async function poolcreate(pooldetails) {

            //     return new Promise((resolve, reject) => {
            //         const contractAddress = "0xa6d2003E3207A7dC9618e5d48A0Cf3771bC8E3d8";// Contract Call

            //         const contractPath = path.join(process.cwd(), '/api/contracts/' + "CreatePool.sol");
            //         const contractname = "CreatePool";
            //         const source = fs.readFileSync(contractPath, 'utf8');

            //         const input = {
            //             language: 'Solidity',
            //             sources: {
            //                 [contractname + ".sol"]: {
            //                     content: source,
            //                 },
            //             },
            //             settings: {
            //                 outputSelection: {
            //                     '*': {
            //                         '*': ['*'],
            //                     },
            //                 },
            //             },
            //         };

            //         const tempFile = JSON.parse(solc.compile(JSON.stringify(input)));
            //         //winlog.info(tempFile)
            //         const contractFile = tempFile.contracts[contractname + ".sol"][contractname];
            //         //winlog.info(contractFile)
            //         //const bytecode = contractFile.evm.bytecode.object;
            //         const abi = contractFile.abi;
            //         const incrementer = new web3.eth.Contract(abi, contractAddress);

            //         const encoded = incrementer.methods.createPool(pooldetails).encodeABI();
            //         const increment = async () => {
            //             winlog.info(
            //                 `Calling the increment by ${"updated value"} function in contract at address ${contractAddress}`
            //             );
            //             const createTransaction = await web3.eth.accounts.signTransaction(
            //                 {
            //                     from: address,
            //                     to: contractAddress,
            //                     data: encoded,
            //                     gasLimit: 6000000,
            //                     chainId: "101122"
            //                 },
            //                 privKey
            //             ); const createReceipt = await web3.eth.sendSignedTransaction(
            //                 createTransaction.rawTransaction
            //             );
            //             winlog.info(`Tx successfull with hash: ${createReceipt.transactionHash}`);
            //             res.send({ "success": true, "message": "Pool and NFT created" });

            //             resolve("pool save success")
            //         }; increment();
            //     });
            // }


            // IpfsEmitter.on('contractstatuschange', () => {

            //     MongoClient.connect(url, function (err, client) {
            //         const db = client.db("IntainMarkets");
            //         db.collection("loancontract").updateMany({ poolid: req.body.poolid }, { $set: { contractstatus: "reviewed" } }, function (err, result) {
            //             if (err) throw err;
            //             winlog.info("contract status change done")
            //             res.send({ "success": true, "message": "NFT minted" });
            //         });
            //     })

            // })

        }
    },
    Poolcreate: function (req, res) {
        winlog.info("inside fetch pool details");
        MongoClient.connect(url, function (err, client) {
            const db = client.db("IntainMarkets");
            db.collection('pool_detail').find({ poolID: req.body.poolid }).toArray(function (err, result) {
                winlog.info("res:: " + result.length);
                if (result.length > 0) {
                    winlog.info("pool data:::" + JSON.stringify(result))
                    //getlmsdata(result,loanmap)

                    var pooldetails = [[result[0].uniqueID, result[0].poolID, result[0].poolname, result[0].issuerId, result[0].assetclass, result[0].assignverification, result[0].assignservicer, result[0].assignunderwriter, result[0].numberofloans, result[0].setupdate, result[0].originalbalance, "Verified", result[0].loanids, result[0].typename, result[0].filepath, result[0].typepurpose, result[0].attributes, result[0].issuerName, result[0].assignpayingagent]];
                    winlog.info(pooldetails);
                    poolcreate(pooldetails)
                    winlog.info("done");
                }
            });
        })
        async function poolcreate(pooldetails) {

            return new Promise((resolve, reject) => {
                const contractAddress = "0xa6d2003E3207A7dC9618e5d48A0Cf3771bC8E3d8";// Contract Call

                const contractPath = path.join(process.cwd(), '/api/contracts/' + "CreatePool.sol");
                const contractname = "CreatePool";
                const source = fs.readFileSync(contractPath, 'utf8');

                const input = {
                    language: 'Solidity',
                    sources: {
                        [contractname + ".sol"]: {
                            content: source,
                        },
                    },
                    settings: {
                        outputSelection: {
                            '*': {
                                '*': ['*'],
                            },
                        },
                    },
                };

                const tempFile = JSON.parse(solc.compile(JSON.stringify(input)));
                //winlog.info(tempFile)
                const contractFile = tempFile.contracts[contractname + ".sol"][contractname];
                //winlog.info(contractFile)
                //const bytecode = contractFile.evm.bytecode.object;
                const abi = contractFile.abi;
                const incrementer = new web3.eth.Contract(abi, contractAddress);

                const encoded = incrementer.methods.createPool(pooldetails).encodeABI();
                const increment = async () => {
                    winlog.info(
                        `Calling the increment by ${"updated value"} function in contract at address ${contractAddress}`
                    );
                    const createTransaction = await web3.eth.accounts.signTransaction(
                        {
                            from: address,
                            to: contractAddress,
                            data: encoded,
                            gasLimit: 6000000,
                            chainId: "101122"
                        },
                        privKey
                    ); const createReceipt = await web3.eth.sendSignedTransaction(
                        createTransaction.rawTransaction
                    );
                    winlog.info(`Tx successfull with hash: ${createReceipt.transactionHash}`);
                    res.send({ "success": true, "message": "Pool and NFT created" });

                    resolve("pool save success")
                  IPFS.addfile(req, res);
                }; increment();
            });
        }

    }
}
module.exports = IPFS